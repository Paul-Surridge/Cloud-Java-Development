Built-in Utility Functions

	Arrays

		asList()			Convert to List
		binarySearch()			As described
		copyOf()			As described
		copyOfRange()			As described
		deepEquals()			Check equality based on deep contents of array
		deepHashCode()			Generate hashcode based on deep contents of array
		deepToString()			Generate string based on deep contents of array
		equals()			As described
		fill()				As described
		hashCode()			As described
		parallel...			Multiple common functions but in parallel
		setAll()			As described
		sort()				As described
		toString()			Convert to string representation of contents

	Integer

		Constructors:
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			Integer(int i)						Convert int to Integer (Box)
			Integer(String s)					Convert String to Integer


		Conversion:
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			byte		byteValue()				Convert 'this' to byte value after narrowing
			double		doubleValue()				Convert 'this' to double after widening
			float		floatValue()				Convert 'this' to float after widening
			int		intValue()				Convert 'this' to int (unbox)
			long		longValue()				Convert 'this' to long after widening

		static	Integer		decode(String s)			Convert s to Decimal, Octal or Hex:

											Decimal:	123
											Octal:		0123
											Hex:		0x123		0X123		#123
							
											No whitespace
											No underscore
											Leading zeros ignored
											-+ sign optional

		static 	int		parseInt(String s)			Convert s to int:
		static 	int		parseUnsignedInt(String s)
											"123"			123
											"-123"			-123
											"+123"			123

		static 	int		parseInt(String s, int radix)		Convert s to int using radix:
		static 	int		parseUnsignedInt(String s, int radix)
											("0", 10) 		0
											("473", 10) 		473
											("+42", 10) 		42
											("-0", 10) 		0
											("-FF", 16) 		-255
											("1100110", 2) 		102
											("2147483647", 10) 	2147483647
											("-2147483648", 10) 	-2147483648
											("2147483648", 10) 	throws a NumberFormatException
											("99", 8) 		throws a NumberFormatException
											("Kona", 10) 		throws a NumberFormatException
											("Kona", 27) 		411787

											Character/Digits in s must exist within range of radix:

												Oct:		0-7
												Dec:		0-9
												Hex:		0-9 A-F

											Radix:	Character.MIN_RADIX - Character.MAX_RADIX.
											s cannot be null or ""
											s cannot be a value larger than int (32 bit)

		Bitwise Operations
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		static	int		bitCount(int i)				Number of 1's in i

		static	int 		highestOneBit(int i)			Return 0, 1, 2, 4, 8 ... representing the position of the first (most right/significant) bit in i interpreted as 2-complement:

											Integer.highestOneBit(8):	8
											Integer.highestOneBit(10):	8
											Integer.highestOneBit(6):	4

 		static	int 		lowestOneBit(int i)			Return 0, 1, 2, 4, 8 ... representing the position of the last (least left/significant) bit in i interpreted as 2-complement:

											Integer.lowestOneBit(11):	1
											Integer.lowestOneBit(10):	2
											Integer.lowestOneBit(8):	8

		static	int		numberOfLeadingZeros(int i)		Return the number of 0's preceding the left most bit (MSB) as interpreted using 2-complement:

											i = 0000 0000 0000 0000 0000 0000 0000 0001		31
											i = 0001 0010 0001 0000	0100 0000 1000 0010		3
											i = 0101 0010 0001 0001	0000 0010 0001 0000		1

		static	int		numberOfTrailingZeros(int i)		Return the number of 0's after the right most bit (LSB) as interpreted using 2-complement:

											i = 0000 0000 0000 0000 0000 0000 0000 0001		0
											i = 0001 0010 0001 0000	0100 0000 1000 0010		1
											i = 0101 0010 0001 0001	0000 0010 0001 0000		4

											NB: The documentation states that is interpreted using 2-complement but the return value seems to include the sign bit (Left most bit)?

		static 	int		reverse(int i)				Reverse the bits as represented using 2-complement:

											i:	0001 0010 0001 0000 0100 0000 1000 0010		303,054,978
											return:	0100 0001 0000 0010 0000 1000 0100 1000		1,090,652,232

											i:	1001 0010 0001 0000 0100 0000 1000 0010		2,450,538,626
											return:	Error (given that i is too large, likely due to representation of 2-complement)

		static 	int		reverseBytes(int i)			Return the int value with all of the bytes in i reversed:

												1-------- 2-------- 3-------- 4--------
											i:	0000 0000 0000 0000 0000 0000 1000 0010		130
												4-------- 3-------- 2-------- 1--------
											return:	1000 0010 0000 0000 0000 0000 0000 0000		-2,113,929,216

											i:	0000 0000 0000 0000 0000 0000 0010 0010		34
											return:	0010 0010 0000 0000 0000 0000 0000 0000		570,425,344

		Comparison
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		static	int		compare(int x, int y)			Compare where: 		0: Equal 		<0: x < y		>0: x > y		(Signed - 2-Complement)
			int		compareTo(int i)			Compare where:		0: Equal		<0: this < i		>0: this > i
		static	int		compareUnsigned(int x, int y)		Compare where: 		0: Equal 		<0: x < y		>0: x > y		(Unsigned)

			boolean		equals(Object obj)			True if obj is an Integer, not null and value is same as this		

		static	int		min(int a, int b)			Return the smallest of a or b
		static	int		max(int a, int b)			Return the largest of a or b








		static	int		divideUnsigned(int x, int y)		Divide x/y as both unsigned

		static	Integer		getInteger(String s)			Get System Property s (as defined/obtained via System.getProperty(String s)), val is the default value returned if property do not exist, use null if not needed to prevent unnecessary allocation of Integer
		static	Integer		getInteger(String s, int val)
		static	Integer		getInteger(String s, Integer val)

			int		hashCode()				Return hashCode for this
		static	int		hashCode(int i)				Return hashCode for i

		static	int		remainderUnsigned(int x, int y)		Return the unsigned remainder of x/y (compared to % which I presume is signed)













		rotateLeft
		rotateRight
		shortValue
		signum()
		toBinaryString
		toOctalString
		toHexString
		toString
		toUnsignedString
		toUnsignedLong
		valueOf()

		BYTES				Number of bytes used within an int using 2-complement
		MAX_VALUE			Maximum value that can be contained within an int (2^31)-1
		MIN_VALUE			Minimum value that can be contained within an int -2^31
		SIZE				Number of bits used within an int using 2-complement
		TYPE				Class instance representing the primitive type int

	Double
	Float
	Byte
	Character
	String
	Math
	Bitwise (all)

	.floor() ?
	.ceiling() ?

				