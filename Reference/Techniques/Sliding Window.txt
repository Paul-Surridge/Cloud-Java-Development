Sliding Window:

	- Sliding window is a subset of dynamic programming (though the approach is quite different compared to memoization or tabulation) due to:

		- Optimal Solution:	The optimal solution of a subproblem can be used to find the optimal solution of a larger problem if not the overal solution
		- Overlap:		The naive approach contains many overlapping subproblems which can be greatly reduced/ignored/discarded

	- Sliding window problems are identified via:

		- Data Structure:	Data structure will be iterable (and potentially ordered) like an array or string
		- Subrange:		Solution requires the identification of a subarray within the environment e.g. find longest, shortest or some kind of target value
		- High Complexity:	Brute force solution is of high time complexity O(n^2) or O(2^n)

	- Sliding windows typically have the target of:

		- Longest:		Find the longest sequence which matches a particular criteria, condition or value
		- Shortest:		Find the shortest sequence which matches a particular criteria, condition or value
		- Value:		Find the subarray/subsequence which results in a particular criteria, condition or value

	- Sliding windows can normally be solved in:

		Time:		O(N)
		Space:		O(1)

	- Sliding windows are typically an indication when need to reduce the time complexity:

		O(n^3) -> O(n^2) or O(n^2) -> O(n)

	- Sliding window problems consist of the following:

		Pointers: (minimum) x2

			Start:		Pointer at the start of the current window
			End:		Pointer at the end of the current window

		Tracked Result:

			The most optimum result is stored and kept track of as the window proceeds through the environment

		Grow/Shrink

			The x2 main concerns of sliding window problems are:

			Grow:		When to grow the window
			Shrink:		When to shrink the window

		Insight:

			It is necessary to analyse the problem deeply to identify those key insightsand aspects which:

				Behaviour:		Determine how the window should behave i.e. which variety to use from the x4 below
				Reduction:		Determine how aspects of the progress through the environment can be removed/reduced by aspects and requirements of the problem
				Efficiencies:		Determine how efficiencies can be introduced given the behaviour, nature, structure and components of the algorithm

	- Sliding window application(s):

		1. Subarrays/subsequences:	Evaluation
		2. Search:			Find elements within 1D array
		3. Dynamic window:		Expand/contract as required to find a target criteria e.g find the longest palindrome			

	- Sliding window problems have several kinds/varieties:

		1. Fast/Slow:

			- x2 pointers both start at 0
			- Fast move:		Fast initially moves away until find a valid window
			- Slow move:		Slow moves away until the window is no longer valid and fast moves off again until another valid window is found

			- Commom Problem:	Minimum Window Substring: Find the smallest window which contains all required characters

		2. Fast/Catchup:

			- Similar to fast/slow
			- x2 pointers both start at 0
			- Fast move:		Fast initially moves away until find a valid window
			- Slow catchup:		Slow 'jumps' to the position of fast rather than move incrementally

			- Commom Problem:	Max Consecutive Sum: Find the consecutive sequence which sums to the highest total out of an array of -/+ and 0 values, where the slow jumps to fast when sum is zero

		3. Fast/Lagging:

			- x2 pointers where slow always lags a fixed number of itertions behind fast
			- The value of the window is kept track of accordingly to find the optimum value

			- Commom Problem:	House Robber: What is the maximum amount of gold that can be stolen from houses not next door to each other

		4. Front/Back:

			- x2 pointers begin a start and end
			- x2 pointers move inwards looking for optimal solution/answer/value

			- Commom Problem:	Rain Water: What is the maximum amount of water that is captured in any given window/range

	- Example:

		Find maximum values in each subarray of k length:

		Description:

			- Given an array of integers, using a window length k find the maximum value in each subarray.

				[1,3,-1,-3,5,3,6,7],	k = 3;

			- Output: [3,3,5,5,6,7]

		Solution:

			- Use a deque to implement a monotonically decreasing queue.
			- Starting from element 0 slide the window of length k until it reaches the end of the array.
			- For each window:

				1. Add the element to the tail of the queue.
				2. Deque must always be decreasing from the head.
				3. Therefore if tail is <= element continually removed the tail until the tail > element or element becomes the new head.
				4. Once all elements in window have been added, the head is the largest value in window.
				5. Remove the head (as is now out of bounds) before moving window forward. 

			for(i = 0 to n-k)	//the window shifting
			{
				for(i = 0 to k)
				{
					iElement = iArray[i]

	    				if (deque.isEmpty())
	    					Append iElement to tail (as first element)
	    				else if (tail) > iElement 
	    					Append iElement to tail
					else
					{
						while(!deque.isEmpty() && (dq.peekLast() <= iElement))
							Remove the element from tail

						Append iElement to tail (or as the new head if the deque was emptied)
					}
				}

				Store: Head = maximum in this particular window
				Remove head
			}

		Behaviour:

			Given: [8,7,6,9], k=2
	
				Stage 1:	[8,7,6,9]
						 ___

					Deque:		8	Add 8 as deque is empty
					Deque:		8,7	Add 7 as 7 is less than 8 (the deque must always decrease)
					Result:		Head = 8
					Deque:		7	Remove head

				Stage 2:	[8,7,6,9]
						   ___

					Deque:		7	Element 7 = tail therefore remove tail and append Element (which also happens to be 7)
					Deque:		7,6	Add 6 as 6 is less than 7 (the deque must always decrease)
					Result:		Head = 7
					Deque:		6	Remove head

				Stage 3:	[8,7,6,9]
						     ___

					Deque:		-	6 is removed given is <= Element
					Deque:		9	Add 9
					Result:		Head = 9
					Deque:		-	Remove head

			Result: [7,6,9]











































	DP:

		- Dynamic programming problem contains a optimal substructure property:

			Optimal solution to a subproblem can be used to find the optimal solution to a larger solution if not the overall solution