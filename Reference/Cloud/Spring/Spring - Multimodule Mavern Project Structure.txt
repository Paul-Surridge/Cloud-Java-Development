Spring

	Spring Project Structure (via Maven MultiModule Project):

		Project Structure:

							 _______________________
							|			|
					Dependencies----| Libraries/Programs	|
					|		|_______________________|
					|		 _______________________
					|		|			|
					Plugins---------| Compilers		|
					|		|_______________________|
					|
		 _______________	|
		| pom.xml	|	|
		| (root)	|	|			...
		|		|-------|
		|		|	|
		|		|	|		 _______________________
		|_______________|	|		| Module 1		|
					|		|			|		
					|		| psvm (String args[])	|
					|		| {			|
					|		|  ...			|
					|		| }			|
					|		|			|
					|		| _____________________	|
					|		|| pom.xml	       ||
					|		||_____________________||
					|		|_______________________|
					Modules -------- _______________________
							| Module 2		|
							|			|
							| 			|
							|			|
							|			|
							|			|
							|			|
							| _____________________	|
							|| pom.xml	       ||
							||_____________________||
							|_______________________|

			- Module is a directory.
			- Module is a project within itself.
			- Module can be contained within other modules forming the following structure and naming convention:
		
				Root Module
					Child Module
					Parent Module
						Child Module
					Child Module

			- Module may contain the psvm entry point from the JVM (only x1 module may contain the psvm).

		Project Build, Compile and Run:

			1. IDE:				Press Play
			2. IDE:				Passes the pom.xml in the root folder to Maven.
			3. Maven - Build:		Parses the pom.xml file:

								- Downloads and caches all listed dependencies from mvnrepository.com that are used by Maven and the application:

									- Dependencies
										- Libraries
										- Frameworks	e.g. SpringFramework
										...

									- Plugins
										- Compilers
										...

								- Output Files:		All build outputs are located within the 'target' directory in the root.
								- Output Status:	All build status outputs are located and listed within the 'build' tab of the IDE.
								- Multi-Module:		If the pom.xml specifies that it is a multi-module project then Maven will be directed and continue to parse the pom.xml files within the respective module subdirectories.

			4. Maven - Compile:		Compiles the java source code to bytecode (typically using a downloaded Maven compiler plugin).
			5. Maven - JVM:			Once built and compiled:

								- JVM is instantiated.
								- JVM is pointed to the psvm wherever that may be.
								- JVM runs the java application as normal (using all of the dependencies listed in the pom.xml).

			6. Spring - Instantiation:	psvm(String args[])

								- Spring framework library is used to instantiate a container.
								- Spring framework library contains all of the classes/interfaces/components necessary to build a container.
								- Spring framework processes the project files to build and configure the container and the contents of the container:

									1. *.xml:		Read in *.xml which specifies all of the beans to be created and behaviour of the container.
									2. Annotations:		Scan all of the *.java files within the module using the annotations to specify all of the beans to be created and behaviour of the container.

		Spring Console Output:

			- Spring outputs to the console i.e. the entities within the spring framework i.e. the components of Spring when instantiating a container and generating beans all output to console of their status and progress to enable system monitoring and fault find:

				public static void main(String[] args)
				{
			  	    System.out.println("Test");

			  	    ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(CONFIG_LOCATION);
				}

				1. Console:	"Test"
				2. Spring:	ClassPathXmlApplicationContext creates a container in accordance with the *.xml at CONFIG_LOCATION.
				3. Console:	All of the status output contained within all of the internal referenced components is sent to console as the container is instantiated and initialised in accordnce with *.xml.

			- The psvm(String args[]) is still the entry point of the program:

				- Spring nor Maven introduce any additional layers 'before hand'.
				- The first output to console is the first line of the psvm i.e. Test.
				- Spring simply consists of a library of java classes/interfaces/components which are used, declared, defined and referenced in the standard way for all java components.  

		Module Communication:

			- Module communication is achieved as follows:

				1. Module 1 pom.xml - Open:				Open pom.xml of Module 1 that requires access to Module 2 components.
				2. Module 1 pom.xml - Add Module 2 as dependency:	Add and declare Module 2 a dependency of Module 1.

				NB: All module communication is reflected and illustrated by the dependencies within the Maven tab.

		Module Dependencies:

			- Module dependencies i.e. dependencies of the source code within that module are declared within the respective module pom.xml.
			- Module dependencies are transitive i.e. Module 1 establishing a dependency on Module 2 will in turn gain access to all of Module 2's dependencies.
			- Module dependencies are transitive therefore do not need to be explicitly repeated and declared in each module.
			- Module dependencies may include those already declared in a parent module.

		Module Versioning:

			- Module version as specified via the <version> tag within the pom.xml has the following 'rules':

				1. When adding a dependency to a module which is already included in the parent pom.xml it is not necessary to declare the <version> of that dependency (only the <groupId> and <artifactId> are needed).
				2. When adding a dependency which is another child module then the <version> must be included.

			- Module version is inherited by all child modules.
			- Module version of the parent pom.xml is exposed as a built-in Maven property ${project.version}, therefore if adding child module 2 as a dependency to child module 1 it is recommened:

				1. Use the Maven property:	${project.version}
				2. Do not hardcode the version of the child module 2.

				For should the parent pom.xml version change then it would overwrite the version of all child modules including the hardcoded version referenced in the pom.xl of child module 1.

			- Module version should ideally be completed in x1 place e.g. parent pom.xml via ${project.version} due to:

				1. Simplicity:		Simply x1 version number for the set of all modules.
				2. Management:		Easier to manage rather than individual version numbers for all modules.
				3. Robust:		Less likely to accidently break a dependency link (unlike if dependencies of other child modules are all hardcoded).

				NB: Maven does not permit the use a version property within a <parent> tags, all such elements must be hardcoded.
